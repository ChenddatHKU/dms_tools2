.. _dms2_bcsubamplicons:

==========================================
``dms2_bcsubamplicons``
==========================================

.. contents::
   :local:

Overview
-------------
This program can process the FASTQ reads generated by `Barcoded subamplicon sequencing`_ to count the frequencies of each identity at each site, and to generate summary statistics.

Barcoded subamplicon sequencing
-----------------------------------
This program is designed to process data generated by the barcoded subamplicon deep sequencing strategy described in `Doud and Bloom (2016)`_.
This is a strategy that enables more accurate Illumina deep sequencing.
In this section we recap exactly how that strategy works.

Barcoded subamplicon sequencing involves using PCR to make a series of subamplicons from the gene to be sequenced. 
Each of these subamplicons contains a random barcode (a string of ``N`` nucleotides) at each end that provides a unique identifier. 
The barcoded subamplicons are then diluted such that the number of unique ssDNA molecules is less than the read depth, and then this dilution is amplified by primers that also add the Illumina adaptors. 
Finally, these molecules are sequenced.

In analyzing the sequencing, we can then identify barcodes that are sequenced multiple times, and a consensus sequence for the subamplicon can be built from the multiple reads. 
The ``dms2_bcsubamplicons`` script performs this analysis.

To understand how the sequencing is done in detail, example primers are shown below for sequencing of the hemagglutinin (HA) from A/WSN/1933 (H1N1) influenza::

    Rnd1for1: 5'-CTTTCCCTACACGACGCTCTTCCGATCTNNNNNNNNaagcaggggaaaataaaaacaaccaaa-3'                                                                                                                                                                                                                                                                                                                                                             Rnd1for427: 5'-CTTTCCCTACACGACGCTCTTCCGATCTNNNNNNNNccaaggaaagttcatggcccaac-3'                                                                                                                                                                                                                                                                                                                                                           Rnd1for850: 5'-CTTTCCCTACACGACGCTCTTCCGATCTNNNNNNNNgtttgagtccggcatcatcacc-3'                                                                                                                                                                                                                                                                                                                                              Rnd1for1276: 5'-CTTTCCCTACACGACGCTCTTCCGATCTNNNNNNNNcaacaacttagaaaaaaggatggaaaatttaaataaa-3'
        WSN HA with coding sequence in caps: 5'-agcaaaagcaggggaaaataaaaacaaccaaaATGAAGGCAAAACTACTGGTCCTGTTATATGCATTTGTAGCTACAGATGCAGACACAATATGTATAGGCTACCATGCGAACAACTCAACCGACACTGTTGACACAATACTCGAGAAGAATGTGGCAGTGACACATTCTGTTAACCTGCTCGAAGACAGCCACAACGGGAAACTATGTAAATTAAAAGGAATAGCCCCACTACAATTGGGGAAATGTAACATCACCGGATGGCTCTTGGGAAATCCAGAATGCGACTCACTGCTTCCAGCGAGATCATGGTCCTACATTGTAGAAACACCAAACTCTGAGAATGGAGCATGTTATCCAGGAGATCTCATCGACTATGAGGAACTGAGGGAGCAATTGAGCTCAGTATCATCATTAGAAAGATTCGAAATATTTCCCAAGGAAAGTTCATGGCCCAACCACACATTCAACGGAGTAACAGTATCATGCTCCCATAGGGGAAAAAGCAGTTTTTACAGAAATTTGCTATGGCTGACGAAGAAGGGGGATTCATACCCAAAGCTGACCAATTCCTATGTGAACAATAAAGGGAAAGAAGTCCTTGTACTATGGGGTGTTCATCACCCGTCTAGCAGTGATGAGCAACAGAGTCTCTATAGTAATGGAAATGCTTATGTCTCTGTAGCGTCTTCAAATTATAACAGGAGATTCACCCCGGAAATAGCTGCAAGGCCCAAAGTAAGAGATCAACATGGGAGGATGAACTATTACTGGACCTTGCTAGAACCCGGAGACACAATAATATTTGAGGCAACTGGTAATCTAATAGCACCATGGTATGCTTTCGCACTGAGTAGAGGGTTTGAGTCCGGCATCATCACCTCAAACGCGTCAATGCATGAGTGTAACACGAAGTGTCAAACACCCCAGGGAGCTATAAACAGCAATCTCCCTTTCCAGAATATACACCCAGTCACAATAGGAGAGTGCCCAAAATATGTCAGGAGTACCAAATTGAGGATGGTTACAGGACTAAGAAACATCCCATCCATTCAATACAGAGGTCTATTTGGAGCCATTGCTGGTTTTATTGAGGGGGGATGGACTGGAATGATAGATGGATGGTATGGTTATCATCATCAGAATGAACAGGGATCAGGCTATGCAGCGGATCAAAAAAGCACACAAAATGCCATTAACGGGATTACAAACAAGGTGAACTCTGTTATCGAGAAAATGAACACTCAATTCACAGCTGTGGGTAAAGAATTCAACAACTTAGAAAAAAGGATGGAAAATTTAAATAAAAAAGTTGATGATGGGTTTCTGGACATTTGGACATATAATGCAGAATTGTTAGTTCTACTGGAAAATGAAAGGACTTTGGATTTCCATGACTTAAATGTGAAGAATCTGTACGAGAAAGTAAAAAGCCAATTAAAGAATAATGCCAAAGAAATCGGAAATGGGTGTTTTGAGTTCTACCACAAGTGTGACAATGAATGCATGGAAAGTGTAAGAAATGGGACTTATGATTATCCAAAATATTCAGAAGAATCAAAGTTGAACAGGGAAAAGATAGATGGAGTGAAATTGGAATCAATGGGGGTGTATCAGATTCTGGCGATCTACTCAACTGTCGCCAGTTCACTGGTGCTTTTGGTCTCCCTGGGGGCAATCAGTTTCTGGATGTGTTCTAATGGGTCTTTGCAGTGCAGAATATGCATCTGAgattaggatttcagaaatataaggaaaaacacccttgtttctact-3'
        WSN HA with coding sequence in caps: 3'-tcgttttcgtccccttttatttttgttggtttTACTTCCGTTTTGATGACCAGGACAATATACGTAAACATCGATGTCTACGTCTGTGTTATACATATCCGATGGTACGCTTGTTGAGTTGGCTGTGACAACTGTGTTATGAGCTCTTCTTACACCGTCACTGTGTAAGACAATTGGACGAGCTTCTGTCGGTGTTGCCCTTTGATACATTTAATTTTCCTTATCGGGGTGATGTTAACCCCTTTACATTGTAGTGGCCTACCGAGAACCCTTTAGGTCTTACGCTGAGTGACGAAGGTCGCTCTAGTACCAGGATGTAACATCTTTGTGGTTTGAGACTCTTACCTCGTACAATAGGTCCTCTAGAGTAGCTGATACTCCTTGACTCCCTCGTTAACTCGAGTCATAGTAGTAATCTTTCTAAGCTTTATAAAGGGTTCCTTTCAAGTACCGGGTTGGTGTGTAAGTTGCCTCATTGTCATAGTACGAGGGTATCCCCTTTTTCGTCAAAAATGTCTTTAAACGATACCGACTGCTTCTTCCCCCTAAGTATGGGTTTCGACTGGTTAAGGATACACTTGTTATTTCCCTTTCTTCAGGAACATGATACCCCACAAGTAGTGGGCAGATCGTCACTACTCGTTGTCTCAGAGATATCATTACCTTTACGAATACAGAGACATCGCAGAAGTTTAATATTGTCCTCTAAGTGGGGCCTTTATCGACGTTCCGGGTTTCATTCTCTAGTTGTACCCTCCTACTTGATAATGACCTGGAACGATCTTGGGCCTCTGTGTTATTATAAACTCCGTTGACCATTAGATTATCGTGGTACCATACGAAAGCGTGACTCATCTCCCAAACTCAGGCCGTAGTAGTGGAGTTTGCGCAGTTACGTACTCACATTGTGCTTCACAGTTTGTGGGGTCCCTCGATATTTGTCGTTAGAGGGAAAGGTCTTATATGTGGGTCAGTGTTATCCTCTCACGGGTTTTATACAGTCCTCATGGTTTAACTCCTACCAATGTCCTGATTCTTTGTAGGGTAGGTAAGTTATGTCTCCAGATAAACCTCGGTAACGACCAAAATAACTCCCCCCTACCTGACCTTACTATCTACCTACCATACCAATAGTAGTAGTCTTACTTGTCCCTAGTCCGATACGTCGCCTAGTTTTTTCGTGTGTTTTACGGTAATTGCCCTAATGTTTGTTCCACTTGAGACAATAGCTCTTTTACTTGTGAGTTAAGTGTCGACACCCATTTCTTAAGTTGTTGAATCTTTTTTCCTACCTTTTAAATTTATTTTTTCAACTACTACCCAAAGACCTGTAAACCTGTATATTACGTCTTAACAATCAAGATGACCTTTTACTTTCCTGAAACCTAAAGGTACTGAATTTACACTTCTTAGACATGCTCTTTCATTTTTCGGTTAATTTCTTATTACGGTTTCTTTAGCCTTTACCCACAAAACTCAAGATGGTGTTCACACTGTTACTTACGTACCTTTCACATTCTTTACCCTGAATACTAATAGGTTTTATAAGTCTTCTTAGTTTCAACTTGTCCCTTTTCTATCTACCTCACTTTAACCTTAGTTACCCCCACATAGTCTAAGACCGCTAGATGAGTTGACAGCGGTCAAGTGACCACGAAAACCAGAGGGACCCCCGTTAGTCAAAGACCTACACAAGATTACCCAGAAACGTCACGTCTTATACGTAGACTctaatcctaaagtctttatattcctttttgtgggaacaaagatga-5'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Rnd1rev426: 3'-gtgtgtaagttgcctcattgtcatagtacNNNNNNNNTCTAGCCTTCTCGTGTGCAGACTTGAGG-5'                                                                                                                                                                                                                                                                                                                                                    Rnd1rev849: 3'-agtttgcgcagttacgtactcacNNNNNNNNTCTAGCCTTCTCGTGTGCAGACTTGAGG-5'                                                                                                                                                                                                                                                                                                                                                                 Rnd1rev1275: 3'-actactacccaaagacctgtaaaNNNNNNNNTCTAGCCTTCTCGTGTGCAGACTTGAGG-5'                                                                                                                                                                                                                                                                                                                                                    Rnd1rev1698: 3'-ctaatcctaaagtctttatattcctttttgtgggaaNNNNNNNNTCTAGCCTTCTCGTGTGCAGACTTGAGG-5'

Briefly, the steps are as follows:

    1) The library of HA genes is subjected to PCR with primers to create subamplicons of :math:`\approx 425` internal nucleotides (or less) as well as additional adaptor and primer-binding sequences. In the example above, PCRs are performed with the following primer pairs:

        - ``Rnd1for1`` and ``Rnd1rev426``: these primers create a subamplicon spanning nucleotides 1 to 426 (codons 1 to 142) of the WSN HA, which is the part of the sequence shown in caps above.

        - ``Rnd1for427`` and ``Rnd1rev849``: these primers create a subamplicon spanning nucleotides 427 to 849 (codons 143 to 283).

        - ``Rnd1for850`` and ``Rnd1rev1275``: these primers create a subamplicon spanning nucleotides 850 to 1275 (codons 284 to 425).

        - ``Rnd1for1276`` and ``Rnd1rev1698``: these primers create a subamplicon spanning nucleotides 1276 to 1698 (codons 426 to 566).
      
       **Note that each of these subamplicons begins and ends on a full codon.** This is important; design your primers to do the same.

    2) The subamplicons are diluted so that the total number of ssDNA molecules is less than the sequencing depth. Since each subamplicon molecule has 8 ``N`` nucleotides at each end, there are :math:`4^{16} \approx 4.3 \times 10^9` unique barcodes. Since the number of unique barcodes is much greater than the total number of molecules in the dilution, each barcode will generally be associated with just one molecule.

    3) The barcoded subamplicons are further amplified by primers that add the Illumina adaptors, and perhaps Illumina indices for multiplexing. For instance, here are two example primers for this second round of PCR::

        >Rnd2forUniversal: forward primer for the round 2 PCRs that adds the Illumina adaptor
        AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCC

        >Rnd2revIndex: reverse primer for the round 2 PCRs that adds the TruSeq index 1 (in lower case) as well as the Illumina adaptor
        CAAGCAGAAGACGGCATACGAGATcgtgatGTGACTGGAGTTCAGACGTGTGCTCTTCC

    4) The products of the round 2 PCRs are sequenced with overlapping paired-end reads of sufficient length to cover the entire subamplicon, and the sequencing data are analyzed with the standard Illumina pipeline to generate FASTQ files with the R1 and R2 reads.

    5) The FASTQ files are analyzed with ``dms2_bcsubamplicons``. For the example here, the command might be::

        dms2_bcsubamplicons --name WSN-HA --refseq WSN-HA.fasta --R1 R1_L*.fastq.gz --alignspecs 1,426,36,38 427,849,32,32 850,1275,31,37 1276,1698,46,45 --R1trim 200 --R2trim 170

       The meanings of the arguments are detailed in the `Command-line usage`_. 


Algorithm for assembling and aligning subamplicons
----------------------------------------------------
The algorithm implemented by ``dms2_bcsubamplicons`` is as follows:

1) Read pairs are discarded if either read fails the Illumina chastity filter.

2) All sites in each read are classified as "high quality" if the site is not an ``N`` (ambiguous nucleotide) and has a Q-score of at least ``--minq``, or as "low quality" otherwise. At low-quality sites, the identity in the read is then set to ``N`` for the remainder of the analysis.

3) We discard any read pairs for which there are any ``N`` nucleotides in the barcode.

4) We then collect all remaining read pairs for each barcode (concatenating the barcodes on the paired reads for a total barcode length that is twice ``--bclen``) and perform all subsequent operations on these barcodes.

5) Any barcode with less than ``--minreads`` read pairs is discarded.

6) The R1 and R2 reads for each barcode are each assembled into consensus sequences. The consensus sequences is built by applying the following algorithm to each site:

    a. We collect the identities for all reads, ignoring ``N`` nucleotides.
    
    b. If there are less than ``--minreads`` called (non ``N``) nucleotides, set the consensus identity for that site to ``N``.
    
    c. If there are at least ``--minreads`` called nucleotides, set the consensus identity to ``N`` if the fraction of called identities that are identical is less than ``--minconcur``, and set it to the consensus called identity if at least ``--minconcur`` of the reads are identical at the site.

7) We attempt to align the consensus read sequences for each barcode to subamplicon positions specified by ``--alignspecs``. The attempted alignment does **not** accommodate gaps; the consensus sequence must align gaplessly at the position specified by ``--alignspecs``. In any region where the reads overlap (which may happen near the center of the subamplicon), if both consensus reads report high quality nucleotides, the identity is considered ambiguous if the sequences disagree. If one consensus read is ambiguous, we take the identity for the non-ambiguous read. The alignment procedure is as follows:

    a. We trim the reads from the 3' end using the ``--R1trim`` and ``--R2trim`` parameters for that subamplicon.

    b. We then attempt to align the consensus reads at each position indicated in ``--alignspecs``. We consider an alignment acceptable if there are no more than ``--maxmuts`` mutations relative to ``refseq`` (with mutations counted in terms of character ``--chartype``) and if the fraction of called nucleotides in the aligned consensus is at least ``--minfraccall``. We take the first valid alignment that we find. But unless you are working with a very repetitive sequence or specify a very large ``--maxmuts``, there should be at most one valid alignment.

8) For each aligned subamplicon, we count the identities at each site. We call an identity if at least ``--minreads`` reads with non-ambiguous identities span that site, and at least ``--minconcur`` of these agree on the identity. If both reads span a site and they disagree, we call that site as ``N``.

9) The results are reported in the `Output files`_.

Command-line usage
---------------------
.. argparse::
   :module: dms_tools2.parseargs
   :func: bcsubampliconsParser
   :prog: dms2_bcsubamplicons

   \-\-name
    The `Output files`_ will have a prefix equal to the name specified here.
    This name should only contain letters, numbers, and dashes (-).

   \-\-alignspecs
    It is important to set ``--alignspecs`` so that you don't count the part of the subamplicon that is the barocde or in the primer binding site, since the nucleotide identities in this region do not come from the templates being sequenced. See the `Barcoded subamplicon sequencing`_ above for an example.

    The alignments will fail if you don't set ``--alignspecs`` exactly correctly for each subamplicon. So if you have reads failing to align to part of your gene, carefully check ``--alignspecs`` to make sure it is correct.

   \-\-bclen
    This is the length of the barcode on **each** primer. So a value of 8 corresponds to a total of 16 ``N`` nucleotides on the two primers. See the `Barcoded subamplicon sequencing`_ section above for an example of primers with 8 ``N`` nucleotides.

   \-\-R1
    You can specify multiple files using the ``*`` wildcard character, as in ``reads_R1_L*.fastq.gz``.

    If you have multiple files that are all in the same directory, it may be convenient to specify this directory using ``--fastqdir`` and then avoid repeatedly listing the directory name for each file.

   \-\-fastqdir
    This option can be useful if the ``--R1`` / ``--R2`` files are found in a common directory. 
    Instead of repeatedly listing that directory name, you can just provide it here and then give the file (or subdirectory/file) names for the files via ``--R1`` / ``--R2``.

   \-\-R2
    Most pipelines for generating Illumina FASTQ files have the read 1 sequences in a file that contains the string ``_R1`` and the read 2 sequences in a file that contains the string ``_R2``. If this is the case, the R2 file name can just be guessed from the R1 file name. However, you can use this option if your R2 files have a different name that you need to specify manually.

   \-\-R1trim
    Often your reads will be longer than needed, so it is helpful to trim the low-quality nucleotides that tend to be at the end of long readfs.

    If you specify one number, then **all** R1 reads are trimmed to this length. If you specify a list of numbers equal to the entries for ``--alignspecs``, then each read is trimmed differently depending on which subamplicon it aligns to.

    Note that the trimming is done to the initial read, and so the trimmed length specifies here includes the barcode, the primer binding site, and then the part of the read that provides useful sequence information.

   \-\-chartype
    If ``chartype`` is ``codon`` then ``--refseq`` must provide a valid coding sequence (length a multiple of 3).

   \-\-purgeread
    Why would you want to purge some of the read pairs? You may be trying to determine whether sequencing to a higher depth will improve your results. If you set ``--purgeread`` to a value > 0 (say 0.5), you'll see how the results would be affected if you had fewer reads. If these results are noticeably worse, this supports that idea that you might be in regime where more reads would help.

   \-\-purgebc
    This option differs from ``--purgeread`` in that it purges **barcodes** rather than reads. So this gives you some indication of how your results would change if you bottlenecked to fewer unique molecules prior to the round 2 PCR to attach the barcodes to each molecule.

   \-\-bcinfo
    This will be a very large file and creating it will take some time, so only use this option if you need to look at this file for debugging.

Output files
--------------
The program produces a variety of output files. 
These files all have the prefix specified by ``--outdir`` and ``--name``.
For instance, if you use ``--outdir results --name sample-1``, then the output files will have the prefix ``./results/sample-1`` and the suffixes described below.

Here are the specific output files:

Log file
+++++++++++
This file has the suffix ``.log``. 
It is a text file that logs the progress of the program.

Read statistics file
++++++++++++++++++++++
This file has the suffix ``_readstats.csv``. 
It gives the statistics on all the processed reads. 
For instance::

    category,number of reads
    fail filter,0
    low Q barcode,791246
    total,12607196

Reads-per-barcode file
+++++++++++++++++++++++++
This file has the suffix ``_readsperbc.csv``.
It gives the number of reads associated with each barcode.
For instance::

    number of reads,number of barcodes
    1,1283556
    2,484522
    3,544678
    4,497192
    5,382903
    6,257677
    7,153841
    8,83522
    9,41776
    10,19171
    11,8486
    12,3525
    13,1404
    14,560
    15,212
    16,81
    17,31
    18,13
    19,6
    20,2
    21,3
    22,1

Barcode statistics file
+++++++++++++++++++++++++
This file has the suffix ``_bcstats.csv``.
It provides information on how many of the barcodes could be successfully aligned.
For instance::

    category,number of barcodes
    aligned,2246649
    not alignable,232957
    too few reads,1283556
    total,3763162

Counts file
+++++++++++++
This is output file that has the results that you will probably use for subsequent analyses.
It has the suffix ``_codoncounts.csv`` if you are using ``--chartype codon``.
It gives the number of called identities at each site in the sequence, as well as the wildtype sequence.
For instance, here are the first few lines::

    site,wildtype,AAA,AAC,AAG,AAT,ACA,ACC,ACG,ACT,AGA,AGC,AGG,AGT,ATA,ATC,ATG,ATT,CAA,CAC,CAG,CAT,CCA,CCC,CCG,CCT,CGA,CGC,CGG,CGT,CTA,CTC,CTG,CTT,GAA,GAC,GAG,GAT,GCA,GCC,GCG,GCT,GGA,GGC,GGG,GGT,GTA,GTC,GTG,GTT,TAA,TAC,TAG,TAT,TCA,TCC,TCG,TCT,TGA,TGC,TGG,TGT,TTA,TTC,TTG,TTT
    1,ATG,0,0,0,0,0,0,0,0,0,0,0,0,3,1,378573,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    2,AAG,5,1,378402,23,0,0,9,0,0,0,24,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    3,GCA,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,378245,0,2,0,0,0,0,0,13,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0
    4,AAA,378721,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

Detailed barcode information file
++++++++++++++++++++++++++++++++++
This file has the suffix ``_bcinfo.txt.gz``. 
It is a very large gzipped text file that contains information on all the reads and barcodes. 
The format should be self explanatory.
This file is only created if you use the ``--bcinfo`` option, and may be helpful for debugging if your reads aren't aligning as expected.

Memory usage
---------------------------
``dms2_bcsubamplicons`` stores all of the reads in the FASTQ files in memory. Therefore, it uses a substantial amount of memory, typically around a gigabyte per million paired-end sequencing reads. However, for typical data sets such memory usage is well within the capacity of modern large-memory nodes.

.. include:: weblinks.txt
