#!python

"""Aligns and counts mutations in barcoded subamplicons."""


import os
import sys
import logging
import natsort
import pandas
import dms_tools2.parseargs



def main():
    """Main body of script."""

    parser = dms_tools2.parseargs.prefsParser()
    args = vars(parser.parse_args())
    prog = parser.prog

    random.seed(1)

    # set up names of output files
    assert re.search('^[a-zA-Z0-9\-]+$', args['name']), \
            "--name should contain only letters, numbers, and dashes"
    if args['outdir']:
        if not os.path.isdir(args['outdir']):
            os.mkdir(args['outdir'])
    else:
        args['outdir'] = ''
    filesuffixes = {
            }
    files = dict([(f, os.path.join(args['outdir'], '{0}{1}'.format(
            args['name'], s))) for (f, s) in filesuffixes.items()])

    # do we need to proceed?
    if args['use_existing'] == 'yes' and all(map(
                os.path.isfile, files.values())):
        print("Output files already exist and '--use_existing' is 'yes', "
              "so exiting with no further action.")
        sys.exit(0)

    logger = dms_tools2.utils.initLogger(files['log'], prog, args)

    # log in try / except / finally loop
    try:

        # remove expected output files if they already exist
        for f in files:
            if os.path.isfile(f):
                logger.info("Removing existing file {0}".format(f))
                os.remove(f)

        # read in the counts files
        if not args['indir']:
            args['indir'] = ''
        else:
            assert os.path.isdir(args['indir']), "Cannot find --indir"
        counts = {}
        for ctype in ['pre', 'post']:
            fname = os.path.join(args['indir'], args[ctype])
            logger.info("Reading {0}-selection counts from {1}".format(
                    ctype, fname))
            assert os.path.isfile(fname), "Can not find {0}".format(fname)
            counts[ctype] = pandas.read_csv(fname)
        if args['err']:
            (fpre, fpost) = [os.path.join(args['indir'], f) for 
                    f in args['err']]
            assert all(map(os.path.isfile, [fpre, fpost])),\
                    "Missing --err files {0}, {1}".format(fpre, fpost)
            if os.path.realpath(fpre) == os.path.realpath(fpost):
                logger.info("Reading error-control counts from {1}"
                        .format(fpre))
                counts['err'] = pandas.read_csv(fpre)
            else:
                for (ctype, f) in [('pre', fpre), ('post', fpost)]:
                    logger.info("Reading {0}-selection error-control "
                            "counts from {0}".format(ctype, f))
                    counts['err{0}'.format(ctype)] = pandas.read_csv(args[f])
        assert all(['site' in df.columns for df in counts.values()]),\
                "counts file do not all have column titled 'site'"
        sites = natsort.natsorted(list(counts.values())[0]['site'].values)
        MAKE SURE ALL SITES ARE THE SAME

    except:
        logger.exception('Terminating {0} with ERROR'.format(prog))
        for (fname, fpath) in files.items():
            if fname != 'log' and os.path.isfile(fpath):
                logger.exception("Deleting file {0}".format(fpath))
                os.remove(fpath)

    else:
        logger.info('Successful completion of {0}'.format(prog))

    finally:
        logging.shutdown()


if __name__ == '__main__':
    main() # run the script
